from operator import pos
import logging
from flask import Flask, json, jsonify, request, session
from flask.templating import render_template
from flask_cors import CORS
from decimal import *
import config

import json

import datetime

from werkzeug.utils import redirect

import bcrypt
import pymongo

# LDAD CONNECTION STUFF
from bson.objectid import ObjectId

# setting up logging
logger = logging.getLogger('PureTalk')

logger.setLevel(logging.DEBUG)

todayFormatted = (datetime.datetime.today()).strftime("%Y-%m-%d")

fh = logging.FileHandler('logs/puretalk-{}.py.log'.format(todayFormatted))
fh.setLevel(logging.DEBUG)

formatter = logging.Formatter("[%(asctime)s] - %(name)14s - %(levelname)8s | %(message)s","%Y-%m-%d %H:%M:%S")
fh.setFormatter(formatter)

logger.addHandler(fh)

app = Flask(__name__)
app.secret_key = '2abceVR5ENE7FgMxXdMwuzUJKC2g8xgy'

cors = CORS(app, resources={r"/api/v2": {"origins": "*"}})
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True


# BLUEPRINT
from pureApi import apiBlueprint, convertToJSON
from customerAPI import customerApiBlueprint
from pureApi import unsetCompanyID


from vicidialAPI import viciApiBlueprint

app.register_blueprint(apiBlueprint)
app.register_blueprint(customerApiBlueprint)
app.register_blueprint(viciApiBlueprint)

version = '1.3.8.13'

def connectToDB():
    client = pymongo.MongoClient("mongodb+srv://admin:QN6icvpq6SlOvevl@cluster0.vc0rvv.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
    mongoDB = client['jamesbon']
    return mongoDB

def validateLogin():
    try:
        if session['user']:
            try:
                print(session['version'])
                if session['version'] == version:
                    session['debug'] = config.debug
                    return True
                else:
                    session.clear()
                    return False
            except:
                session.clear()
                return False
        else:
            return False
    except:
        return False

def validateCompany(companyID):
    try:
        if int(companyID) in session['companies']:
            return True
    except:
        pass
    return False


@app.route('/')
def index():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                campaigns = getCampaigns()
                return render_template('twilio/index.html', companyName='PureTalk', pageTitle='Dashboard', navPosition='index', campaigns=campaigns)
            return render_template('vicidial/index.html', companyName='PureTalk', pageTitle='Dashboard', navPosition='index')
        else:
            return redirect('/super-admin')

    return redirect('/login')

@app.route('/super-admin')
def indexAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('index-admin.html', companyName='PureTalk', pageTitle='Dashboard', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='index')

    return redirect('/login')

@app.route('/switch-company')
def switchCompany():
    if validateLogin():
        unsetCompanyID()
        if session['user']['super_admin'] == 0:
            return redirect('/select-company')
        return redirect('/companies')

    return redirect('/login')

@app.route('/select-company')
def selectCompany():
    if validateLogin():
        if session['user']['super_admin'] == 0:
            if session['user']['company_id'] == None:
                companies = getCompanies()
                return render_template('/company-select.html', companyName='PureTalk', pageTitle='Dashboard', navPosition='index', companies=companies)
            else:
                return redirect('/super-admin')
            
        return redirect('/select-company')

    return redirect('/login')

@app.route('/articles')
def articles():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('articles.html', companyName='PureTalk', pageTitle='Articles', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='articles')
    return redirect('/login')

@app.route('/subscription-plans')
def subscriptionPlans():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('subscription-plans.html', companyName='PureTalk', pageTitle='Subscription Plans', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='subscriptions')
    return redirect('/login')

@app.route('/companies')
def companies():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
            mongoDB = client['jamesbon']
            companies = mongoDB['companies']
            unsetCompanyID()
            companies = getCompanies("created_at", pymongo.DESCENDING)
            client.close()
            return render_template('companies.html', companyName='PureTalk', pageTitle='Companies', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='companies', companies=companies)
    return redirect('/login')

@app.route('/ai-agents-admin')
def aiAgentsAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('ai-agents-admin.html', companyName='PureTalk', pageTitle='Companies', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='ai-agents-admin')
    return redirect('/login')

@app.route('/virtual-agents-admin')
def virtualAgentsAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('virtual-agents-admin.html', companyName='PureTalk', pageTitle='Virtual Agents', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='virtual-agents-admin')
    return redirect('/login')

@app.route('/super-admin-edit')
def superAdminEdit():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            #companies = getCompanies()
            users = getUsers(True)
            return render_template('super-admins.html', companyName='PureTalk', pageTitle='Companies', companyImg='9867959136a2357fbe9eb7d4f93d9e87.png', navPosition='super-admin-edit', users=users)
    return redirect('/login')

@app.route('/ai-agents')
def aiAgents():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('vicidial/ai-agents.html', companyName='PureTalk', pageTitle='AI Agents', navPosition='index', navTab='')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/call-manager')
def callManager():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                campaigns = getCampaigns()
                return render_template('twilio/call-manager.html', companyName='PureTalk', pageTitle='Call Manager', navPosition='call-manager', navTab='campaign-manager', campaigns=campaigns)
            return render_template('vicidial/call-manager.html', companyName='PureTalk', pageTitle='Call Manager', navPosition='call-manager', navTab='campaign-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')
        
@app.route('/campaigns')
def campaigns():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                campaigns = getCampaigns()
                return render_template('twilio/campaigns.html', companyName='PureTalk', pageTitle='Campaigns', navPosition='campaigns', navTab='campaign-manager', campaigns=campaigns)
            return render_template('vicidial/campaigns.html', companyName='PureTalk', pageTitle='Campaigns', navPosition='campaigns', navTab='campaign-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/leads')
def leads():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                campaigns = getCampaigns()
                return render_template('twilio/leads.html', companyName='PureTalk', pageTitle='Leads', navPosition='leads', navTab='lead-manager', campaigns=campaigns, campaign=request.args.get('campaignid'))
            return render_template('vicidial/leads.html', companyName='PureTalk', pageTitle='Leads', navPosition='leads', navTab='lead-manager', campaign=request.args.get('campaignid'))
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/lists')
def lists():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('vicidial/lists.html', companyName='PureTalk', pageTitle='Leads', navPosition='lists', navTab='lead-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/leads-list')
def leadsList():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('vicidial/leads-list.html', companyName='PureTalk', pageTitle='Leads', navPosition='leads-list', navTab='lead-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')

@app.route('/agree')
def disclaimerAgree():
    session['lead-agreement'] = True
    return redirect('/import-leads')

@app.route('/import-leads')
def importLeads():
    if validateLogin():
        if session['user']['company_id']:
            try:
                if session['lead-agreement']:
                    session['lead-agreement'] = False
                    if session['call_type'] == 'twilio':
                        campaigns = getCampaigns()
                        return render_template('twilio/import-leads.html', companyName='PureTalk', pageTitle='Import Leads', navPosition='import-leads', navTab='lead-manager', campaigns=campaigns)
                    return render_template('vicidial/import-leads.html', companyName='PureTalk', pageTitle='Import Leads', navPosition='import-leads', navTab='lead-manager')
            except:
                session['lead-agreement'] = False
                
            if session['call_type'] == 'twilio':
                return render_template('twilio/import-lead-agreement.html', companyName='PureTalk', pageTitle='Import Lead Agreement', navPosition='import-leads', navTab='lead-manager')
            return render_template('vicidial/import-lead-agreement.html', companyName='PureTalk', pageTitle='Import Lead Agreement', navPosition='import-leads', navTab='lead-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/export-leads')
def exportLeads():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                return render_template('twilio/export-leads.html', companyName='PureTalk', pageTitle='Export Leads', navPosition='export-leads', navTab='lead-manager')
            return render_template('vicidial/export-leads.html', companyName='PureTalk', pageTitle='Export Leads', navPosition='export-leads', navTab='lead-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/import-caller-ids')
def importCallerIDs():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                campaigns = getCampaigns()
                return render_template('twilio/import-caller-ids.html', companyName='PureTalk', pageTitle='Import Caller IDs', navPosition='import-caller-ids', navTab='lead-manager', campaigns=campaigns)
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/caller-ids')
def callerIDs():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                campaigns = getCampaigns()
                return render_template('twilio/caller-ids.html', companyName='PureTalk', pageTitle='Caller IDs', navPosition='caller-ids', navTab='lead-manager', campaigns=campaigns)
            return render_template('vicidial/caller-ids.html', companyName='PureTalk', pageTitle='Caller IDs', navPosition='caller-ids', navTab='lead-manager')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/follow-up-calls')
def followUpCalls():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('vicidial/follow-up-calls.html', companyName='PureTalk', pageTitle='Follow Up Calls', navPosition='follow-up-calls', navTab='appointments')
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/staff-members')
def staffMembers():
    if validateLogin():
        if session['user']['company_id']:
            users = getUsers(False)
            return render_template('staff-members.html', companyName='PureTalk', pageTitle='Staff Members', navPosition='staff-members', navTab='user-management', users=users)
        else:
            return redirect('/super-admin')

    return redirect('/login')
    
@app.route('/staff-members-admin')
def staffMembersAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            users = getUsers(False)
            return render_template('staff-members-admin.html', companyName='PureTalk', pageTitle='Staff Members', navPosition='staff-members', navTab='user-management', users=users)

    return redirect('/login')
    
@app.route('/sales-members')
def salesMembers():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('sales-members.html', companyName='PureTalk', pageTitle='Sales Members', navPosition='sales-members', navTab='user-management')
        else:
            return redirect('/super-admin')

    return redirect('/login') 
    
@app.route('/sales-members-admin')
def salesMembersAdmin():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('vicidial/sales-members.html', companyName='PureTalk', pageTitle='Sales Members', navPosition='sales-members', navTab='user-management')
        else:
            return redirect('/super-admin')

    return redirect('/login') 
    
@app.route('/roles-admin')
def rolesAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('roles-admin.html', companyName='PureTalk', pageTitle='Role Setup', navPosition='roles', navTab='user-management')

    return redirect('/login')
    
@app.route('/roles')
def roles():
    if validateLogin():
        if session['user']['company_id']:
            return render_template('roles.html', companyName='PureTalk', pageTitle='Role Setup', navPosition='roles', navTab='user-management')

    return redirect('/login')
    
@app.route('/billing')
def billing():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                return render_template('twilio/billing.html', companyName='PureTalk', pageTitle='Billing', navPosition='billing', navTab='settings')
            return render_template('twilio/billing.html', companyName='PureTalk', pageTitle='Billing', navPosition='billing', navTab='settings')
        else:
            return redirect('/super-admin')

    return redirect('/login') 
    
@app.route('/billing-admin')
def billingAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            companies = getCompanies()
            return render_template('twilio/billing-admin.html', companyName='PureTalk', pageTitle='Billing', navPosition='billing', navTab='settings', companies=companies)

    return redirect('/login') 
    
@app.route('/form-builder')
def formBuilder():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                return render_template('twilio/form-builder.html', companyName='PureTalk', pageTitle='Form Builder', navPosition='form-builder', navTab='settings')
            return render_template('vicidial/form-builder.html', companyName='PureTalk', pageTitle='Form Builder', navPosition='form-builder', navTab='settings')
        else:
            return redirect('/super-admin')

    return redirect('/login') 
    
@app.route('/settings')
def settings():
    if validateLogin():
        if session['user']['company_id']:
            if session['call_type'] == 'twilio':
                return render_template('twilio/settings.html', companyName='PureTalk', pageTitle='Settings', navPosition='settings', navTab='settings')
            return render_template('vicidial/settings.html', companyName='PureTalk', pageTitle='Settings', navPosition='settings', navTab='settings')
        else:
            return redirect('/super-admin')

    return redirect('/login') 
    
@app.route('/settings-admin')
def settingsAdmin():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('settings-admin.html', companyName='PureTalk', pageTitle='Settings', navPosition='settings', navTab='settings')
        else:
            return redirect('/')
    
@app.route('/chat-stories')
def chatStories():
    if validateLogin():
        if session['user']['super_admin'] == 1:
            unsetCompanyID()
            return render_template('chat-bot/stories.html', companyName='PureTalk', pageTitle='Settings', navPosition='settings', navTab='settings')
        else:
            return redirect('/')

    return redirect('/login') 

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        if validateLogin():
            if session['user']['super_admin'] == 1:
                if session['user']['company_id']:
                    return redirect('/')
                else:
                    return redirect('/super-admin')
            else:
                if session['user']['company_id']:
                    return redirect('/')
                return redirect('/select-company')
        try:
            message = session['message']
            session.pop('message')
        except:
            message = None
        session['version'] = version
        if config.debug == True:
            return render_template('vicidial/login.html', companyName='PureTalk', pageTitle='Login', navPosition='index', message=message)
        else:
            return redirect('https://puretalk.ai/login')
    elif request.method == 'POST':
        session.clear()
        username = request.form['username']
        password = bytes(request.form['password'], 'utf-8')
        client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
        mongoDB = client['jamesbon']
        users = mongoDB['users']
        filterBy = {
            "email":username
        }
        for user in users.find(filterBy):
            if user['status'] == 'enabled':
                if bcrypt.checkpw(password,bytes(user['password'], 'utf-8')):
                    session['user'] = {
                        'company_id':str(user['company_id']),
                        'first_name':user['first_name'],
                        'last_name':user['last_name'],
                        'email':user['email'],
                        'image':user['image'],
                        'super_admin':user['super_admin'],
                        'user_id':str(user['_id'])
                    }
                    roleUsers = mongoDB['role_user_new']
                    roleUserFilterBy = {
                        "user_id":user['_id']
                    }
                    companyList = []
                    permission_sets = {}
                    if str(user['_id']) == '613b8a785a2cd24ac1a33bc0':
                        companies = mongoDB['companies']
                        for company in companies.find():
                            companyList.append(str(company['_id']))
                    else:
                        for roleUser in roleUsers.find(roleUserFilterBy):
                            roleFilterBy = {
                                "_id":roleUser['role_id']
                            }
                            roles_col = mongoDB['roles']
                            role = roles_col.find_one(roleFilterBy)
                            if role:
                                companyList.append(str(role['company_id']))
                                permission_sets[str(role['company_id'])] = {}
                                for permission in role['permissions']:
                                    permission_sets[str(role['company_id'])][str(permission['_id'])] = {
                                        "name":str(permission['name']),
                                        "display_name":str(permission['display_name']),
                                        "id":str(permission['_id'])
                                    }
                            
                            #if user['super_admin'] == False:
                            #    session['user']['company_id'] = str(role['company_id'])
                    #print(companyList)
                    session['permission_sets'] = permission_sets
                    session['companies'] = companyList
                    session['user']['company_id'] = None
                    
                    session['version'] = version
                    session['company'] = {}
                    if user['company_id']:
                        company_col = mongoDB['companies']
                        companyFilterBy = {
                            '_id':user['company_id']
                        }
                        company = company_col.find_one(companyFilterBy)
                        if company:
                            session['company'] = {
                                'logo': company['logo'], 
                                'package_type': company['package_type'], 
                                'name': company['name'], 
                                'email': company['email'], 
                                'phone': company['phone'], 
                                'website': company['website'], 
                                'address': company['address'], 
                                'app_layout': company['app_layout'], 
                                'rtl': company['rtl'], 
                                'status': company['status']
                            }
                    client.close()
                    if session['user']['company_id'] == None and session['user']['super_admin'] == 0:
                        return redirect('/select-company')
                    return redirect('/super-admin')
        client.close()
        return render_template('vicidial/login.html', companyName='PureTalk', pageTitle='Login', navPosition='index')

@app.route('/api-docs', methods=['GET', 'POST'])
def apiDocs():
    return render_template('vicidial/api-docs.html', companyName='PureTalk', pageTitle='Login', navPosition='index')

@app.route('/logout')
def logout():
    session.clear()
    if config.debug == True:
        return redirect('/login')
    else:
        return redirect('https://puretalk.ai/login')

def formatDate(myDate):
    return myDate.strftime("%Y/%m/%d")
    
def formatNiceDate(myDate):
    return myDate.strftime("%m/%d/%Y")

def formatDateStd(myDate):
    return myDate.strftime("%Y-%m-%d")

def getDecimal(x):
    try:
        #return Decimal(x.quantize(Decimal('.01'), rounding=ROUND_HALF_UP))
        return float(x)
    except:
        x = 0
        #return Decimal(x.quantize(Decimal('.01'), rounding=ROUND_HALF_UP))
        return float(x)

def getInt(x):
    try:
        #return Decimal(x.quantize(Decimal('.01'), rounding=ROUND_HALF_UP))
        return int(x)
    except:
        x = 0
        #return Decimal(x.quantize(Decimal('.01'), rounding=ROUND_HALF_UP))
        return int(x)

def formatStringToJSON(x):
    try:
        leadData = str(x).replace("'\"", "'\\\"")
        leadData = str(leadData).replace("\"'", "\\\"'")
        leadData = str(leadData).replace("'", '"')
        return json.loads(leadData)
    except:
        leadData = str(x).replace("'\"", "'\\\"")
        leadData = str(leadData).replace("\"'", "\\\"'")
        leadData = str(leadData).replace("'", '"')
        print(leadData)

def getCampaigns():
    client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
    mongoDB = client['jamesbon']
    campaigns_col = mongoDB['campaigns']
    filterBy = {}
    if session['user']['company_id']:
        filterBy['company_id'] = ObjectId(session['user']['company_id'])
    returnPost = []
    for campaign in campaigns_col.find(filterBy):
        campaignData = convertToJSON(campaign)

        campaignData['leads'] = []

        leads_total_summary_col = mongoDB['leads_total_summary']
        summaryFilterBy = {
            'campaign_id':campaign['_id']
        }
        lead_summary = leads_total_summary_col.find_one(summaryFilterBy)
        try:
            campaignData['total_leads'] = getInt(lead_summary['total_leads'])
            campaignData['remaining_leads'] = getInt(lead_summary['remaining_leads'])
        except:
            campaignData['total_leads'] = 0
            campaignData['remaining_leads'] = 0
        returnPost.append(campaignData)
    client.close()
    return returnPost

def getCompanies(sort_col="name", sort_style=pymongo.ASCENDING):
    client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
    mongoDB = client['jamesbon']
    companies = mongoDB['companies']
    company_list = []
    filterBy = {}
    for company in session['companies']:
        company_list.append(ObjectId(company))
    filterBy = {
        "_id":{
            "$in" : company_list
        }
    }
    returnPost = []
    for company in companies.find(filterBy).sort([(sort_col, sort_style)]):
        logoName = '/static/img/brand/default.png'
        companyData = convertToJSON(company)
        if company['logo']:
            logoName = '/static/img/brand/'+str(company['logo'])
        companyData['logo'] = logoName

        companyData['total_users'] = 0
        returnPost.append(companyData)
    client.close()
    return returnPost

def getUsers(superadmin):
    client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
    mongoDB = client['jamesbon']
    users = mongoDB['users']
    company_list = []
    filterBy = {}
    roleFilterBy = {}
    roleUserFilter = {}
    try:
        if session['user']['company_id']:
            roleFilterBy['company_id'] = ObjectId(session['user']['company_id'])
    except:
        pass
        
    try:
        if session['user']['user_id'] != '613b8a785a2cd24ac1a33bc0':
            if session['user']['company_id']:
                roleFilterBy['company_id'] = ObjectId(session['user']['company_id'])
            else:
                for company in session['companies']:
                    company_list.append(ObjectId(company))
                roleFilterBy['company_id'] = {
                    "$in" : company_list
                }
    except:
        pass

    returnPost = {}
    returnPost['users'] = []
    roles = mongoDB['roles']
    user_ids = []
    for role in roles.find(roleFilterBy):
        role_users = mongoDB['role_user_new']
        roleUserFilter['role_id'] = role['_id']
        for user in role_users.find(roleUserFilter):
            if session['user']['user_id'] == '613b8a785a2cd24ac1a33bc0':
                user_ids.append(user['user_id'])
            else:
                if str(user['user_id']) != '613b8a785a2cd24ac1a33bc0':
                    user_ids.append(user['user_id'])
    filterBy['super_admin'] = superadmin
    filterBy["_id"] = {"$in":user_ids}
    for user in users.find(filterBy):
        roles = []
        userData = convertToJSON(user)
        userData['roles'] = []
        roleUsers = mongoDB['role_user_new']
        for roleUser in roleUsers.find({'user_id' : ObjectId(user['_id'])}):
            filterBy = {
                '_id':roleUser['role_id']
            }
            roles_col = mongoDB['roles']
            role = roles_col.find_one(filterBy)
            if role:
                role_dict = convertToJSON(role)
                role_dict.pop('permissions')
                userData['roles'].append(role_dict)
                #roles.append(convertToJSON(role))
        if userData['last_name'] == None:
            userData['last_name'] = ''
        returnPost['users'].append(userData)
    client.close()
    return returnPost['users']

def getForms():
    client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
    mongoDB = client['jamesbon']
    forms = mongoDB['forms']
    filterBy = {}

    try:
        if session['user']['company_id']:
            filterBy['company_id'] = ObjectId(session['user']['company_id'])
    except:
        pass
    if forms.find_one(filterBy):
        return 1
    return 0

def getLeadCount(campaigns):
        client = pymongo.MongoClient("mongodb+srv://admin:QM6icvpQ6SlOveul@cluster0.vc0rw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
        mongoDB = client['jamesbon']
        leads_col = mongoDB['leads']
        filterBy = {}
        campaignList = []
        print(campaigns)
        try:
            for campaign in campaigns:
                campaignList.append(ObjectId(campaign['id']))
        except:
            print('Failure')
            return 0
        
        print(campaignList)
        if len(campaignList) > 0:
            filterBy['campaign_id'] = {'$in':campaignList}
            print(filterBy)
            if leads_col.find_one(filterBy):
                print('Found')
                return 1
            else:
                return 0
        else:
            return 0

if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=config.debug)
